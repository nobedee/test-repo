name: Prompt for User Agreement
on: [create]
jobs:
  Config-To-New-Repository:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Read USAGE_AGREEMENT.md
        id: read-agree-md
        run: echo "::set-output name=content::$(cat USAGE_AGREEMENT.md)"

      - name: Create Agreement Issue
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueContent = `<!DOCTYPE html><html><body>${encodeURIComponent(`## Agreement to Terms\n\nPlease review the terms below and indicate your agreement by commenting below. Input <strong>YES</strong> or <strong>NO</strong>. \n\n---\n\n${process.env.CONTENT}`)}</body></html>`;
            const title = 'Agreement to Terms';
            const owner = '${cat .tempCurrentUser.txt}'; 
            const repo = 'test-repo'; 

            const { data: issue } = await github.issues.create({
              owner,
              repo,
              title,
              body: issueContent
            });
            console.log(`Issue created: ${issue.html_url}`);
          env:
            CONTENT: ${{ steps.read-agree-md.outputs.content }}

      - name: Wait for User Agreement
        id: user-agreement
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = ${{ steps.open-agreement-issue.outputs.issue_number }};
            const context = github.context;
            const owner = context.payload.repository.owner.login;
            const repo = context.payload.repository.name;
            const response = await github.issues.getComment({
              owner,
              repo,
              issue_number,
              comment_id: context.payload.comment.id
            });

            if (response.data.body.includes('YES')) {
              console.log('User agreed to the terms.');
              console.log('Updating configuration...');
              const file = 'config-variables.sh';
              const content = await github.repos.getContent({ owner, repo, path: file });
              const currentContent = Buffer.from(content.data.content, 'base64').toString('utf8');
              const newContent = currentContent.replace(/_acknowledgeAndAgreeToUSAGE_AGREEMENT=/, '_acknowledgeAndAgreeToUSAGE_AGREEMENT=1');

              await github.repos.createOrUpdateFileContents({
                owner,
                repo,
                path: file,
                message: 'Update file after user agreement',
                content: Buffer.from(newContent).toString('base64'),
                sha: content.data.sha,
                branch: 'main'
              });
            } else {
              console.log('User did not agree to the terms.');
              console.log('Updating README.md...');
              const file = 'README.md';
              const content = await github.repos.getContent({ owner, repo, path: file });
              const currentContent = Buffer.from(content.data.content, 'base64').toString('utf8');
              const newContent = currentContent.replace(/# Template to test pull to data-conversion tool/, '# IMPORTANT - BEFORE USING AGREE TO TERMS BY SETTING VALUE OF AGREEMENT VARIABLE TO 1 <br> # Template to test pull to data-conversion tool <br>');
              await github.repos.createOrUpdateFileContents({
                owner,
                repo,
                path: file,
                message: 'Update file after user agreement',
                content: Buffer.from(newContent).toString('base64'),
                sha: content.data.sha,
                branch: 'main'
              });			  
            }
